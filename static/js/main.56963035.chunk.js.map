{"version":3,"sources":["components/Card/index.tsx","components/Login/index.tsx","components/DashboardContent/index.tsx","api/index.ts","components/Dashboard/index.tsx","components/Header/index.tsx","components/Homepage/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["cardCss","css","_templateObject","Login","_ref","onSubmit","Object","core_browser_esm","Login_templateObject","Form","_ref2","formProps","submitting","Field","name","defaultValue","label","isRequired","_ref3","fieldProps","Textfield","FormFooter","Button","type","appearance","isLoading","moneyCss","DashboardContent_templateObject","sectionCss","_templateObject2","fmtNum","n","toLocaleString","undefined","maximumFractionDigits","DashboardContent","_ref$dashboardData","dashboardData","first_name","donation_sum","annual_distribution_percent","charities","fund_value","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","map","cause","charity_name","percent","mockData","actual_distribution","reducer","state","action","objectSpread","Dashboard","component","_useReducer","useReducer","email","step","_useReducer2","slicedToArray","dispatch","onLoginSubmit","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","formData","_","callback","data","wrap","_context","prev","next","Promise","res","setTimeout","then","sent","console","log","stop","_x","_x2","_x3","apply","this","arguments","Dashboard_templateObject","Header","Header_templateObject","href","React","forwardRef","ref","_ref$href","children","rest","objectWithoutProperties","Header_templateObject2","react_router_dom","assign","to","innerRef","Homepage","App","className","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56963035.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css } from '@emotion/core';\n\nexport const cardCss = css`\n  width: 70%;\n  max-width: 700px;\n  background: #fff;\n  border-radius: 3px;\n  padding: 32px;\n  margin: 32px auto;\n\n  @media (min-width: 420px) {\n    width: 50%;\n  }\n`;\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport Form, { Field, FormFooter } from '@atlaskit/form';\nimport Button from '@atlaskit/button';\nimport TextField from '@atlaskit/textfield';\nimport { cardCss } from '../Card';\n\ntype Props = {\n  onSubmit: (formData: { email: string }, _form: any, callback: (errors?: Object) => void) => void;\n};\n\nexport default ({ onSubmit }: Props) => (\n  <div css={cardCss}>\n    <h1\n      css={css`\n        font-size: 18px;\n        color: #505f79;\n      `}\n    >\n      Log in to donor portal\n    </h1>\n    <Form onSubmit={onSubmit}>\n      {({ formProps, submitting }) => (\n        <form {...formProps}>\n          <Field name=\"email\" defaultValue=\"\" label=\"Email\" isRequired>\n            {({ fieldProps }) => <TextField {...fieldProps} />}\n          </Field>\n          <FormFooter>\n            <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n              Submit\n            </Button>\n          </FormFooter>\n        </form>\n      )}\n    </Form>\n  </div>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { DashboardData } from '../../api/types';\nimport { cardCss } from '../Card';\n\ntype Props = {\n  dashboardData: DashboardData;\n};\n\nconst moneyCss = css`\n  font-weight: bold;\n  color: #36b37e;\n  font-size: 32px;\n`;\n\nconst sectionCss = css`\n  ${cardCss}\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 420px) {\n    width: 50%;\n    flex-direction: row;\n  }\n`;\n\nconst fmtNum = (n: number) => n.toLocaleString(undefined, { maximumFractionDigits: 2 });\n\nexport default ({\n  dashboardData: { first_name, donation_sum, annual_distribution_percent, charities, fund_value },\n}: Props) => {\n  return (\n    <div\n      css={css`\n        dl {\n          margin: 0;\n        }\n\n        dd {\n          margin-left: 0;\n        }\n      `}\n    >\n      <div\n        css={css`\n          ${sectionCss}\n          justify-content: space-between;\n        `}\n      >\n        <h1\n          css={css`\n            font-size: 18px;\n            color: #505f79;\n            margin: 0;\n            margin-bottom: 16px;\n          `}\n        >\n          Welcome {first_name}!\n        </h1>\n        <div>\n          Donated this year:\n          <div css={moneyCss}>${fmtNum(donation_sum)}</div>\n        </div>\n      </div>\n      <div css={sectionCss}>\n        <dl>\n          <dd>Your fund value is</dd>\n          <dt css={moneyCss}>${fmtNum(fund_value)}</dt>\n        </dl>\n      </div>\n      <div css={sectionCss}>\n        <dl>\n          <dd>Your annual distribution is</dd>\n          <dt css={moneyCss}>{fmtNum(annual_distribution_percent)}%</dt>\n        </dl>\n      </div>\n      <div\n        css={css`\n          ${sectionCss}\n\n          @media (min-width: 420px) {\n            flex-direction: column;\n          }\n        `}\n      >\n        <div>Each year, you distribute:</div>\n        <table\n          css={css`\n            margin-top: 16px;\n          `}\n        >\n          <thead\n            css={css`\n              font-size: 20px;\n              font-weight: bold;\n            `}\n          >\n            <tr>\n              <td>Cause</td>\n              <td>Distribution</td>\n              <td>Total amount</td>\n            </tr>\n          </thead>\n          <tbody>\n            {charities.map(({ cause, charity_name, percent }) => (\n              <tr>\n                <td>\n                  {charity_name}\n                  <br />\n                  <small>{cause}</small>\n                </td>\n                <td css={moneyCss}>{fmtNum(percent)}%</td>\n                <td css={moneyCss}>${fmtNum((annual_distribution_percent / 100) * fund_value * (percent / 100))}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import axios from 'axios';\nimport { DashboardData } from './types';\n\n// const useMock = false;\nconst useMock = true;\nconst baseUrl = `https://rhok-i4c-winter2019-fe-pyservi.herokuapp.com`;\n\nconst mockData: DashboardData = {\n  actual_distribution: 10143.18,\n  annual_distribution_percent: 15.0,\n  charities: [\n    { cause: 'Underprivileged Youth', charity_name: 'Life for Koori Kids', percent: 10.0 },\n    { cause: 'Refugees in Australia', charity_name: 'St Francis Social Services', percent: 10.0 },\n    { cause: 'Child Slavery', charity_name: 'Connecting Hands', percent: 10.0 },\n    { cause: 'Mental Health', charity_name: 'PANDA', percent: 10.0 },\n    { cause: 'Women & Domestic Violence', charity_name: 'Port Macq Hastings Specialist Service', percent: 10.0 },\n    { cause: 'Global Poverty', charity_name: 'Against Malaria Foundation', percent: 10.0 },\n    { cause: 'Youth at Risk', charity_name: 'Streetwork Incorporated', percent: 20.0 },\n    { cause: 'Social Enterprise', charity_name: 'The Bread and Butter Project', percent: 20.0 },\n  ],\n  donation_sum: 54305.33,\n  first_name: 'Christophe',\n  fund_value: 67621.1809563419,\n};\n\nexport const getDashboardData = (email: string): Promise<{ data: DashboardData }> =>\n  useMock\n    ? new Promise(res => {\n        setTimeout(res, 1000);\n      }).then(() => ({ data: mockData }))\n    : axios.get(`${baseUrl}/get/${email}`);\n","/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\nimport { useReducer, useCallback } from 'react';\nimport Login from '../Login';\nimport DashboardContent from '../DashboardContent';\nimport { getDashboardData } from '../../api';\nimport { DashboardData } from '../../api/types';\nimport { cardCss } from '../Card';\n\ntype Step = 'LOGIN' | 'DASHBOARD';\ntype State = {\n  email: string;\n  step: Step;\n  dashboardData?: DashboardData;\n};\n\nconst reducer = (state: State, action: Partial<State>): State => ({\n  ...state,\n  ...action,\n});\n\nexport default () => {\n  const [state, dispatch] = useReducer(reducer, {\n    email: '',\n    step: 'LOGIN',\n    dashboardData: undefined,\n  });\n\n  const onLoginSubmit = useCallback(\n    (async (formData, _, callback) => {\n      const { data } = await getDashboardData(formData.email);\n      console.log('response data', data);\n      callback();\n\n      dispatch({\n        email: formData.email,\n        step: 'DASHBOARD',\n        dashboardData: data,\n      });\n    }) as React.ComponentProps<typeof Login>['onSubmit'],\n    []\n  );\n\n  let component: React.ReactNode;\n  switch (state.step) {\n    case 'LOGIN': {\n      component = <Login onSubmit={onLoginSubmit} />;\n      break;\n    }\n    case 'DASHBOARD': {\n      component = state.dashboardData && <DashboardContent dashboardData={state.dashboardData} />;\n      break;\n    }\n  }\n\n  return (\n    <div\n      css={css`\n        height: 100vh;\n        overflow-y: hidden;\n        background: #57d9a3;\n      `}\n    >\n      {component}\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\nimport Button from '@atlaskit/button';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <header\n    css={css`\n      min-height: 100px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      background: #eee;\n    `}\n  >\n    <Button\n      appearance=\"primary\"\n      href=\"/dashboard\"\n      component={React.forwardRef<HTMLElement, React.AllHTMLAttributes<HTMLElement>>(\n        ({ href = '', children, ...rest }, ref: any) => (\n          <div\n            css={css`\n              & > a {\n                width: 300px !important;\n                height: 50px !important;\n\n                & > * {\n                  width: 100% !important;\n                }\n              }\n            `}\n          >\n            <Link {...rest} to={href} innerRef={ref}>\n              {children}\n            </Link>\n          </div>\n        )\n      )}\n    >\n      Log in\n    </Button>\n  </header>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport Header from '../Header';\n\nexport default () => (\n  <div>\n    <Header />\n    THIS IS HOMEPAGE\n  </div>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport Homepage from './components/Homepage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Route path=\"/\" exact component={Homepage} />\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}