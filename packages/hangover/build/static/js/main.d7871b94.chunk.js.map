{"version":3,"sources":["images/StLukes.png","images/StreetWork.png","components/Carousel.js","components/DonationBox.js","components/Slider.js","components/Achievement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SausageLink","state","selected","handleClick","_this$props","_this","props","cause","handleCauseClick","this","react_default","a","createElement","onClick","className","selectedCause","causeName","Component","Carousel","showAll","_this2","setState","_ref","_this3","causes","Fragment","class","Object","values","map","Carousel_SausageLink","key","DonationBox","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","handleDonationChange","target","value","donation","id","onChange","type","min","for","Slider","handleDistributionChange","distribution","style","left","concat","Number","max-value","Achievement","achievements","console","log","achievement","achieveName","amount","App","img","StLukes","StreetWork","calculateAmount","_this$state","thousandAchieves","achieve","parseFloat","achieveAmount","toFixed","_this$state2","components_DonationBox","components_Carousel","causeData","components_Slider","alt","backgroundImage","charityName","components_Achievement","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7871b94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/StLukes.21eeeb09.png\";","module.exports = __webpack_public_path__ + \"static/media/StreetWork.54ff95f2.png\";","import React, { Component } from 'react';\n\nclass SausageLink extends Component {\n        state = {\n            selected: false\n        }\n        handleClick = () => {\n            const {cause, handleCauseClick} = this.props\n            handleCauseClick(cause)\n        }\n    render() {\n        const {cause} = this.props\n        return (\n            <li>\n                <span\n                    onClick={this.handleClick}\n                    className={this.props.selectedCause == cause ? 'selected' : ''}\n                >\n                    {cause.causeName}\n                </span>\n            </li>\n        );\n        }\n}\nclass Carousel extends Component {\n    state = {\n        showAll: false,\n    }\n    handleClick = () => {\n        this.setState(({showAll}) => {\n            return {showAll: !showAll}\n        })\n    }\n\n    render() {\n        const {causes} = this.props\n        return (\n            <>\n                <div class=\"select-charities\">\n                    <h3><span>2</span>Pick your Cause</h3>\n                    <button onClick={this.handleClick}>\n                        {this.state.showAll ? 'See All' : 'List'}\n                    </button>\n                </div>\n                <div className={this.state.showAll ? 'charity-list' : ''}>\n                    <ul className={this.state.showAll ? '' : 'tiles'}>\n                        {Object.values(causes).map(cause => {\n                            return(\n                                <SausageLink \n                                    key={cause.causeName}\n                                    cause={cause}\n                                    handleCauseClick={this.props.handleCauseClick}\n                                    selectedCause={this.props.selectedCause}\n                                />\n                                );\n                            })\n                    }\n                    </ul>\n                </div>\n            </>\n        );\n    }\n}\n\n\nexport default Carousel;","import React, { Component } from 'react';\n\nclass DonationBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { donation: null }\n    }\n    handleChange = (event) => {\n        this.props.handleDonationChange(event.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"donation\">\n                <input\n                    id=\"donation\"\n                    onChange={this.handleChange}\n                    type=\"number\"\n                    value={this.props.donation}\n                    min=\"0\"\n                />\n                <label for=\"donation\">$</label>\n            </div>\n         );\n    }\n}\n\nexport default DonationBox;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass Slider extends Component {\n\n    handleChange = (event) => {\n        this.props.handleDistributionChange(event.target.value);\n    }\n\n    render() {\n        const {distribution} = this.props\n        return (\n            <div className=\"slider\">\n                <label for=\"slider\">\n                    <span\n                        style={{\n                            left: `${distribution > 12 ? 330/100 * distribution : 24 + Number(distribution)}px`\n                        }}\n                    >\n                        {this.props.distribution}%\n                    </span>\n                </label>\n                <input\n                    type=\"range\"\n                    onChange={this.handleChange}\n                    value={this.props.distribution}\n                    max-value={100}\n                    min={4}\n                />\n            </div>\n         );\n    }\n}\n\nexport default Slider;","import React, { Component } from 'react';\n\nclass Achievement extends Component {\n\n    render() {\n        const {achievements} = this.props;\n        console.log(achievements)\n        if(!achievements){\n            return null\n        }\n        return (\n            \n            <ul>\n            {achievements.map(achievement => {\n                return(\n                <li key={achievement.achieveName}>\n                    <h2>{achievement.amount}</h2>\n                    <p>{achievement.achieveName}</p>\n                </li>\n                )\n            })}\n            </ul>\n        );\n    }\n}\n\nexport default Achievement;","import React, {Component} from 'react';\nimport causeData from './data/causeInfo';\n\nimport Carousel from './components/Carousel';\nimport DonationBox from './components/DonationBox';\nimport Slider from './components/Slider';\n\nimport './App.scss';\nimport Achievement from './components/Achievement';\n\nimport StLukes from './images/StLukes.png'\nimport StreetWork from './images/StreetWork.png'\n\nclass App extends Component {\n  state = {\n    selectedCause: null,\n    donation: '',\n    distribution: 4,\n    achievements: [],\n  }\n  handleCauseClick = (cause) => {\n    const {selectedCause} = this.state\n    switch(cause.causeName){\n      case 'Refugees in Australia':\n        this.setState({img: StLukes});\n        break;\n      case 'Youth at Risk':\n        this.setState({img: StreetWork});\n        break;\n      break;\n      default:\n        this.setState({img: ''})\n    }\n    if(selectedCause && this.state.selectedCause.causeName === cause.causeName){\n      return this.setState({selectedCause: '', img: ''})\n    }\n    this.setState({selectedCause: cause}, () => this.calculateAmount())\n      if(selectedCause) {\n\n      }\n  }\n\n  handleDonationChange = (donation) => {\n    donation = donation >= 0 ? donation : 0;\n    this.setState({donation}, () => this.calculateAmount())\n  }\n\n  handleDistributionChange = (distribution) => {\n    this.setState({distribution}, () => this.calculateAmount())\n  }\n\n  calculateAmount = () => {\n    if(this.state.selectedCause) {\n      const {donation, distribution, selectedCause} = this.state;\n      const achievements = Object.values(selectedCause.thousandAchieves).map((achieve) => {\n        const {achieveName} = achieve;\n        const amount = parseFloat(donation / 1000 * achieve.achieveAmount * distribution / 100).toFixed(1);\n        return {achieveName, amount}\n      })\n      this.setState({achievements});\n    }\n  }\n  render() {\n    const {selectedCause, distribution, donation} = this.state\n    return (\n        <>\n            <article>\n                <h1>Charity impact simulator</h1>\n                <p>Invest in changing lifes</p>\n            </article>\n            <main className=\"calculator\">\n                <section>\n                    <article>\n                        <h3><span>1</span>Choose a donation amount</h3>\n                        <DonationBox\n                          donation={this.state.donation}\n                          handleDonationChange={this.handleDonationChange}\n                        />\n                    </article>\n                    <article>\n                        <Carousel\n                            causes={causeData.causes}\n                            handleCauseClick={this.handleCauseClick}\n                            selectedCause={this.state.selectedCause}\n\n                        />\n                    </article>\n                    <article>\n                        <h3>\n                            <span>3</span>\n                            Decide how much you invest in that cause\n                        </h3>\n                        <Slider\n                            handleDistributionChange={this.handleDistributionChange}\n                            distribution={this.state.distribution}\n                        />\n                    </article>\n                </section>\n                <aside>\n                    {this.state.img &&\n                        <figure\n                            alt=\"\"\n                            style={{backgroundImage: `url(${this.state.img})`}}\n                        />\n                    }\n                    <article>\n                        {selectedCause && donation &&\n                            <>\n                                {'For '}\n                                <b>{this.state.distribution}%</b>\n                                {' of'}\n                                {' $'}<b>${this.state.donation}</b>\n                                {' you will help '}<b>{selectedCause.charityName}</b>{' providing:'}\n                            </>\n                        }\n                        {selectedCause && donation && distribution &&\n                            <Achievement achievements={this.state.achievements}/>\n                        }\n                    </article>\n                </aside>\n            </main>\n        </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}