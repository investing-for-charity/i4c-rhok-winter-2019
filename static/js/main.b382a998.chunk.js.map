{"version":3,"sources":["components/Login/index.tsx","components/DashboardContent/index.tsx","components/Dashboard/index.tsx","api/index.ts","components/Header/index.tsx","components/Homepage/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Login","_ref","onSubmit","Object","core_browser_esm","react","css","_templateObject","Form","_ref2","formProps","submitting","Field","name","defaultValue","label","isRequired","_ref3","fieldProps","Textfield","FormFooter","Button","type","appearance","isLoading","moneyCss","DashboardContent_templateObject","DashboardContent","dashboardData","_templateObject2","first_name","_templateObject3","donation_sum","toLocaleString","fund_value","_templateObject4","_templateObject5","entries","charities","map","slicedToArray","cause","distribution","reducer","state","action","objectSpread","Dashboard","component","_useReducer","useReducer","email","step","undefined","_useReducer2","dispatch","onLoginSubmit","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","formData","_","callback","data","wrap","_context","prev","next","Promise","res","setTimeout","then","actual_distribution","Against Malaria Foundation [Global Poverty]","Connecting Hands [Child Slavery]","Life for Koori Kids [Underprivileged Youth]","PANDA [Mental Health]","Port Macq Hastings Specialist Service [Women & Domestic Violence]","St Francis Social Services [Refugees in Australia]","Streetwork Incorporated [Youth at Risk]","The Bread and Butter Project [Social Enterprise]","sent","console","log","stop","_x","_x2","_x3","apply","this","arguments","Dashboard_templateObject","Dashboard_templateObject2","Header","Header_templateObject","href","React","forwardRef","ref","_ref$href","children","rest","objectWithoutProperties","Header_templateObject2","react_router_dom","assign","to","innerRef","Homepage","App","className","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b382a998.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { Fragment } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport Form, { Field, FormFooter } from '@atlaskit/form';\nimport Button from '@atlaskit/button';\nimport TextField from '@atlaskit/textfield';\n\ntype Props = {\n  onSubmit: (formData: { email: string }, _form: any, callback: (errors?: Object) => void) => void;\n};\n\nexport default ({ onSubmit }: Props) => (\n  <Fragment>\n    <h1\n      css={css`\n        font-size: 18px;\n        color: #505f79;\n      `}\n    >\n      Log in to donor portal\n    </h1>\n    <Form onSubmit={onSubmit}>\n      {({ formProps, submitting }) => (\n        <form {...formProps}>\n          <Field name=\"email\" defaultValue=\"\" label=\"Email\" isRequired>\n            {({ fieldProps }) => <TextField {...fieldProps} />}\n          </Field>\n          <FormFooter>\n            <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n              Submit\n            </Button>\n          </FormFooter>\n        </form>\n      )}\n    </Form>\n  </Fragment>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { DashboardData } from '../../api/types';\n\ntype Props = {\n  dashboardData: DashboardData;\n};\n\nconst moneyCss = css`\n  font-weight: bold;\n  color: #36b37e;\n  font-size: 32px;\n`;\n\nexport default ({ dashboardData }: Props) => {\n  return (\n    <div>\n      <h1\n        css={css`\n          font-size: 18px;\n          color: #505f79;\n        `}\n      >\n        Welcome {dashboardData.first_name}!\n      </h1>\n      <dl\n        css={css`\n          dd {\n            margin-left: 0;\n            margin-bottom: 16px;\n          }\n        `}\n      >\n        <dt>You have donated</dt>\n        <dd>\n          <span css={moneyCss}>${dashboardData.donation_sum.toLocaleString()}</span>\n        </dd>\n        <dt>Your fund value is</dt>\n        <dd>\n          <span css={moneyCss}>${dashboardData.fund_value.toLocaleString()}</span>\n        </dd>\n      </dl>\n      Each year, you distribute:\n      <table\n        css={css`\n          margin-top: 16px;\n        `}\n      >\n        <thead\n          css={css`\n            font-size: 20px;\n            font-weight: bold;\n          `}\n        >\n          <tr>\n            <td>Cause</td>\n            <td>Distribution</td>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(dashboardData.charities).map(([cause, distribution]) => (\n            <tr>\n              <td>{cause}</td>\n              <td css={moneyCss}>{distribution}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\nimport { useReducer, useCallback } from 'react';\nimport Login from '../Login';\nimport DashboardContent from '../DashboardContent';\nimport { getDashboardData } from '../../api';\nimport { DashboardData } from '../../api/types';\n\ntype Step = 'LOGIN' | 'DASHBOARD';\ntype State = {\n  email: string;\n  step: Step;\n  dashboardData?: DashboardData;\n};\n\nconst reducer = (state: State, action: Partial<State>): State => ({\n  ...state,\n  ...action,\n});\n\nexport default () => {\n  const [state, dispatch] = useReducer(reducer, {\n    email: '',\n    step: 'LOGIN',\n    dashboardData: undefined,\n  });\n\n  const onLoginSubmit = useCallback(\n    (async (formData, _, callback) => {\n      const { data } = await getDashboardData(formData.email);\n      console.log('response data', data);\n      callback();\n\n      dispatch({\n        email: formData.email,\n        step: 'DASHBOARD',\n        dashboardData: data,\n      });\n    }) as React.ComponentProps<typeof Login>['onSubmit'],\n    []\n  );\n\n  let component: React.ReactNode;\n  switch (state.step) {\n    case 'LOGIN': {\n      component = <Login onSubmit={onLoginSubmit} />;\n      break;\n    }\n    case 'DASHBOARD': {\n      component = state.dashboardData && <DashboardContent dashboardData={state.dashboardData} />;\n      break;\n    }\n  }\n\n  return (\n    <div\n      css={css`\n        height: 100vh;\n        overflow-y: hidden;\n        background: #57d9a3;\n      `}\n    >\n      <div\n        css={css`\n          width: 70%;\n          max-width: 700px;\n          background: #fff;\n          border-radius: 3px;\n          padding: 32px;\n          margin: 32px auto;\n\n          @media (min-width: 420px) {\n            width: 50%;\n          }\n        `}\n      >\n        {component}\n      </div>\n    </div>\n  );\n};\n","import axios from 'axios';\nimport { DashboardData } from './types';\n\n// const useMock = false;\nconst useMock = true;\n\nexport const getDashboardData = (email: string): Promise<{ data: DashboardData }> =>\n  useMock\n    ? new Promise(res => {\n        setTimeout(res, 1000);\n      }).then(() => ({\n        data: {\n          actual_distribution: 10143.18,\n          charities: {\n            'Against Malaria Foundation [Global Poverty]': '10%',\n            'Connecting Hands [Child Slavery]': '10%',\n            'Life for Koori Kids [Underprivileged Youth]': '10%',\n            'PANDA [Mental Health]': '10%',\n            'Port Macq Hastings Specialist Service [Women & Domestic Violence]': '10%',\n            'St Francis Social Services [Refugees in Australia]': '10%',\n            'Streetwork Incorporated [Youth at Risk]': '20%',\n            'The Bread and Butter Project [Social Enterprise]': '20%',\n          },\n          donation_sum: 54305.33,\n          first_name: 'Christophe',\n          fund_value: 67621.1809563419,\n        },\n      }))\n    : axios.get(`http://10.1.4.241:5000/get/${email}`);\n","/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\nimport Button from '@atlaskit/button';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <header\n    css={css`\n      min-height: 100px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      background: #eee;\n    `}\n  >\n    <Button\n      appearance=\"primary\"\n      href=\"/dashboard\"\n      component={React.forwardRef<HTMLElement, React.AllHTMLAttributes<HTMLElement>>(\n        ({ href = '', children, ...rest }, ref: any) => (\n          <div\n            css={css`\n              & > a {\n                width: 300px !important;\n                height: 50px !important;\n\n                & > * {\n                  width: 100% !important;\n                }\n              }\n            `}\n          >\n            <Link {...rest} to={href} innerRef={ref}>\n              {children}\n            </Link>\n          </div>\n        )\n      )}\n    >\n      Log in\n    </Button>\n  </header>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport Header from '../Header';\n\nexport default () => (\n  <div>\n    <Header />\n    THIS IS HOMEPAGE\n  </div>\n);\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport Homepage from './components/Homepage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path=\"/\" exact component={Homepage} />\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}